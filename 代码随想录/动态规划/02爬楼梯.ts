/**
 * 1. 确定dp数组及其下标的含义:
 *    dp[i]: 爬到第i层楼梯，有dp[i]种方法
 * 2. 确定递推公式
 *    dp[i] = dp[i - 1] + dp[i - 2]
 * 3. dp数组如何初始化
 *    dp[1] = 1
 *    dp[2] = 2
 * 4. 确定遍历顺序
 *    从前往后
 * 5. 举例推导dp数组
 *    当n=5时，dp数组为[1,2,3,5,8]
 */

/**
 * 假设你正在爬楼梯。需要n阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种方法可以爬到楼顶呢，n是一个正整数
 * 输入2
 * 输出2
 * 解释：有两种方法可以爬到楼顶
 */
const step = (n: number): number => {
  const dp: number[] = [];
  dp[1] = 1;
  dp[2] = 2;
  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }
  return dp[n];
};
